{
  "{E7F2AAE1-A0B2-4D76-8FEE-C3757F436B38}": {
    "source": "{\n  \"name\": \"window\",\n  \"version\": \"0.0.8\",\n  \"description\": \"control window with wsh\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"bundle\": \"wes bundle ./src/window.cs ./usage.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/wachaon/window.git\"\n  },\n  \"keywords\": [\n    \"wsh\",\n    \"window\"\n  ],\n  \"author\": \"wachaon\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/wachaon/window/issues\"\n  },\n  \"homepage\": \"https://github.com/wachaon/window#readme\",\n  \"wes\": {\n    \"dependencies\": {\n      \"csharpscript\": \"0.0.4\"\n    }\n  }\n}",
    "mapping": {},
    "path": "{window}/package.json"
  },
  "{EA5608EC-38BD-458C-AD8C-F9D34EE770B2}": {
    "source": "const { existsFileSync, deleteFileSync } = require('filesystem')\r\nconst { resolve } = require('pathname')\r\nconst { execCommand } = require('utility')\r\nconst argv = require('argv')\r\nconst isCLI = require('isCLI')\r\nconst { execScript, compile } = require('csharpscript')\r\n\r\n// window\r\nconst window_cs = resolve(__dirname, 'src/window.cs')\r\nconst window_exe = resolve(__dirname, 'window.exe')\r\nconst exists_window_exe = existsFileSync(window_exe)\r\nconst window = 'window'\r\nconst Main = 'Main'\r\n\r\n// window method\r\nfunction move(left = 0, top = 0, width = 100, height = 100) {\r\n    if (exists_window_exe) execCommand(`${window_exe} move ${left} ${top} ${width} ${height}`)\r\n    else execScript(window_cs, window, Main, 'move', left, top, width, height)\r\n}\r\n\r\nfunction get() {\r\n    if (exists_window_exe) return execCommand(`${window_exe} get`)\r\n    else execScript(window_cs, window, Main, 'get', 0, 0, 0, 0)\r\n}\r\n\r\nfunction hwnd() {\r\n    if (exists_window_exe) return execCommand(`${window_exe} hwnd`)\r\n    else return execScript(window_cs, window, Main, 'hwnd', 0, 0, 0, 0)\r\n}\r\n\r\nfunction windowLeft() {\r\n    if (exists_window_exe) return execCommand(`${window_exe} windowLeft`)\r\n    else return execScript(window_cs, window, Main, 'windowLeft', 0, 0, 0, 0)\r\n}\r\n\r\nfunction windowTop() {\r\n    if (exists_window_exe) return execCommand(`${window_exe} windowTop`)\r\n    else return execScript(window_cs, window, Main, 'windowTop', 0, 0, 0, 0)\r\n}\r\n\r\nfunction windowWidth() {\r\n    if (exists_window_exe) return execCommand(`${window_exe} windowWidth`)\r\n    else return execScript(window_cs, window, Main, 'windowWidth', 0, 0, 0, 0)\r\n}\r\n\r\nfunction windowHeight() {\r\n    if (exists_window_exe) return execCommand(`${window_exe} windowHeight`)\r\n    else return execScript(window_cs, window, Main, 'windowHeight', 0, 0, 0, 0)\r\n}\r\n\r\nfunction max() {\r\n    if (exists_window_exe) execCommand(`${window_exe} max`)\r\n    else execScript(window_cs, window, Main, 'max', 0, 0, 0, 0)\r\n}\r\n\r\nfunction min() {\r\n    if (exists_window_exe) execCommand(`${window_exe} min`)\r\n    else execScript(window_cs, window, Main, 'min', 0, 0, 0, 0)\r\n}\r\n\r\nfunction normal() {\r\n    if (exists_window_exe) execCommand(`${window_exe} normal`)\r\n    else execScript(window_cs, window, Main, 'normal', 0, 0, 0, 0)\r\n}\r\n\r\nfunction activateTitle(title) {\r\n    if (exists_window_exe) execCommand(`${window_exe} activateTitle \"${title}\"`)\r\n    // else ps(window_cs, ['activateTitle', title, 0, 0, 0])\r\n    else {\r\n        compile(window_cs, { out: window_exe })\r\n        execCommand(`${window_exe} activateTitle \"${title}\"`)\r\n        WScript.Sleep(1)\r\n        deleteFileSync(window_exe)\r\n    }\r\n}\r\n\r\nfunction activateHandle(hWnd) {\r\n    if (exists_window_exe) execCommand(`${window_exe} activateHandle ${hWnd}`)\r\n    else execScript(window_cs, window, Main, 'activateHandle', hWnd, 0, 0, 0)\r\n}\r\n\r\nfunction title() {\r\n    if (exists_window_exe) return execCommand(`${window_exe} title`)\r\n    else return execScript(window_cs, window, Main, 'title', 0, 0, 0, 0)\r\n}\r\n\r\nif (isCLI(__filename)) {\r\n    if (argv.get('c') || argv.get('compile') || argv.unnamed[1] === 'compile') console.log(compile(window_cs, { out: window_exe }))\r\n} else module.exports = {\r\n    move,\r\n    get,\r\n    hwnd,\r\n    windowLeft,\r\n    windowTop,\r\n    windowWidth,\r\n    windowHeight,\r\n    max,\r\n    min,\r\n    normal,\r\n    activateTitle,\r\n    activateHandle,\r\n    title\r\n}",
    "mapping": {
      "csharpscript": "{1F42E12E-C753-4352-971C-03F1A7D3C068}"
    },
    "path": "{window}/index.js"
  },
  "{1F42E12E-C753-4352-971C-03F1A7D3C068}": {
    "source": "const WShell = require('WScript.Shell')\r\n\r\nconst { readFileSync, writeFileSync, existsFileSync, deleteFileSync } = require('filesystem')\r\nconst { resolve, toWin32Sep, basename, extname } = require('pathname')\r\nconst { forEach, execCommand } = require('utility')\r\nconst { SPACE, LF, rLINE_SEP } = require('text')\r\nconst { isNumber } = require('typecheck')\r\nconst { unnamed } = require('argv')\r\nconst genGUID = require('genGUID')\r\nconst isCLI = require('isCLI')\r\n\r\nif (isCLI(__filename)) {\r\n    const args = unnamed.slice(1)\r\n    console.log(execCommand(`${getCompiler()} ${args.join(SPACE)}`))\r\n} else module.exports = {\r\n    execScript,\r\n    execSource,\r\n    compile,\r\n}\r\n\r\n// methods\r\nfunction execScript(input, Class, Method, ...params) {\r\n    const source = readFileSync(resolve(process.cwd(), input), 'auto')\r\n    return execSource(source, Class, Method, ...params)\r\n}\r\n\r\nfunction execSource(source, Class, Method, ...params) {\r\n    let args = \"\"\r\n    if (params.length) args = new Array(params.length).fill(\"\").map((arg, i) => `$args[${i}]`).join(', ')\r\n    const code = `\r\n$Source = @\"\r\n${source}\r\n\"@\r\nAdd-Type -Language CSharp -TypeDefinition $Source\r\n[${Class}]::${Method}(${args})\r\n`.split(rLINE_SEP).join(LF)\r\n    const temp = resolve(process.cwd(), genGUID() + '.ps1')\r\n\r\n    try {\r\n        console.weaklog(writeFileSync(temp, code, 'UTF-8'))\r\n        const command = `powershell -ExecutionPolicy Bypass -File \"${toWin32Sep(temp)}\" ${params.map(param => convert(param)).join(SPACE)}`\r\n        return execCommand(command)\r\n    } catch (e) {\r\n        throw e\r\n    } finally {\r\n        console.weaklog(deleteFileSync(temp))\r\n    }\r\n}\r\n\r\nfunction compile(input, options = {}) {\r\n    options.out = toWin32Sep(\r\n        resolve(\r\n            process.cwd(),\r\n            (\r\n                'out' in options\r\n                    ? options.out\r\n                    : basename(input, extname(input)) + \".exe\"\r\n            )\r\n        )\r\n    )\r\n    const opts = Object.assign({\r\n        target: \"exe\"\r\n    }, options)\r\n\r\n    let params = []\r\n    forEach((value, key) => {\r\n        params.push(`/${key}:${value}`)\r\n    })(opts)\r\n\r\n    const command = `${getCompiler()} ${params.join(\" \")} ${toWin32Sep(resolve(process.cwd(), input))}`\r\n    const result = execCommand(command)\r\n\r\n    if (isCLI(__filename)) console.log(result)\r\n    else return result\r\n}\r\n\r\n// util\r\nfunction getCompiler() {\r\n    return [\r\n        \"v4.0.30319\",\r\n        \"V3.5\",\r\n        \"V3.0\",\r\n        \"v2.0.50727\",\r\n        \"v1.1.4322\",\r\n        \"v1.0.3705\"\r\n    ]\r\n        .map((ver) => {\r\n            return toWin32Sep(\r\n                resolve(\r\n                    WShell.ExpandEnvironmentStrings(\"%SystemRoot%\"),\r\n                    \"Microsoft.NET/Framework\",\r\n                    ver,\r\n                    \"csc.exe\"\r\n                )\r\n            )\r\n        })\r\n        .find(exe => existsFileSync(exe))\r\n}\r\n\r\nfunction convert(item) {\r\n    if (item === true) return \"$True\"\r\n    if (item === false) return \"$False\"\r\n    if (item == null) return \"$Null\"\r\n    if (isNumber(item)) {\r\n        if (item !== item) \"[double]::NaN\"\r\n        if (item === Number.POSITIVE_INFINITY) return \"[double]::PositiveInfinity\"\r\n        if (item === Number.NEGATIVE_INFINITY) return \"[double]::NegativeInfinity\"\r\n        return item\r\n    }\r\n    return `\"${item}\"`\r\n}",
    "mapping": {},
    "path": "{window}/wes_modules/csharpscript/index.js"
  },
  "{58816CF5-478C-4377-976E-51C95B2A6A36}": {
    "source": "{\n  \"name\": \"csharpscript\",\n  \"version\": \"0.0.4\",\n  \"description\": \"csharp script\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"bundle\": \"wes bundle usage/example.cs usage/index.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/wachaon/csharpscript.git\"\n  },\n  \"keywords\": [\n    \"csharp\"\n  ],\n  \"author\": \"wachaon\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/wachaon/csharpscript/issues\"\n  },\n  \"homepage\": \"https://github.com/wachaon/csharpscript#readme\"\n}",
    "path": "{window}/wes_modules/csharpscript/package.json"
  },
  "{B716143B-0658-4A1A-8472-7E6C1218E6E0}": {
    "source": "\r\nusing System;\r\nusing System.Windows;\r\nusing System.Runtime.InteropServices;\r\n\r\npublic class window {\r\n    public static int Main (params string[] args) {\r\n        string method = args[0];\r\n        IntPtr hWnd = GetForegroundWindow();\r\n\r\n        int SW_SHOWNORMAL = 1;\r\n        int SW_SHOWMINIMIZED = 2;\r\n        int SW_MAXIMIZE = 3;\r\n\r\n        if (method == \"move\") {\r\n            int left = Int32.Parse(args[1]);\r\n            int top = Int32.Parse(args[2]);\r\n            int width = Int32.Parse(args[3]);\r\n            int height = Int32.Parse(args[4]);\r\n            int right = width - left;\r\n            int bottom = height - top;\r\n            bool repaint = true;\r\n            MoveWindow(hWnd, left, top, width, height, repaint);\r\n        }\r\n        if (method == \"get\") {\r\n            RECT rect;\r\n            bool flag = GetWindowRect(hWnd, out rect);\r\n\r\n            if (args.Length == 1) {\r\n                Console.WriteLine(\r\n                    \"hWnd: {0} left: {1} top: {2} width: {3} height: {4}\",\r\n                    hWnd,\r\n                    rect.left,\r\n                    rect.top,\r\n                    rect.right - rect.left,\r\n                    rect.bottom - rect.top\r\n                );\r\n            } else {\r\n                return 0;\r\n            }\r\n        }\r\n        if (method == \"hwnd\") {\r\n            if (args.Length == 1) {\r\n                Console.WriteLine(hWnd);\r\n            } else {\r\n                return Int32.Parse(hWnd.ToString());\r\n            }\r\n        }\r\n        if (method == \"windowLeft\") {\r\n            RECT rect;\r\n            bool flag = GetWindowRect(hWnd, out rect);\r\n\r\n            if (args.Length == 1) {\r\n                Console.WriteLine(\"left: {0}\", rect.left);\r\n            } else {\r\n                return Int32.Parse(rect.left.ToString());\r\n            }\r\n        }\r\n        if (method == \"windowTop\") {\r\n            RECT rect;\r\n            bool flag = GetWindowRect(hWnd, out rect);\r\n\r\n            if (args.Length == 1) {\r\n                Console.WriteLine(\"top: {0}\", rect.top);\r\n            } else {\r\n                return Int32.Parse(rect.top.ToString());\r\n            }\r\n        }\r\n        if (method == \"windowWidth\") {\r\n            RECT rect;\r\n            bool flag = GetWindowRect(hWnd, out rect);\r\n\r\n            if (args.Length == 1) {\r\n                Console.WriteLine(\"whidth: {0}\", rect.right - rect.left);\r\n            } else {\r\n                return Int32.Parse((rect.right - rect.left).ToString());\r\n            }\r\n        }\r\n        if (method == \"windowHeight\") {\r\n            RECT rect;\r\n            bool flag = GetWindowRect(hWnd, out rect);\r\n\r\n            if (args.Length == 1) {\r\n                Console.WriteLine(\"height: {0}\",rect.bottom - rect.top);\r\n            } else {\r\n                return Int32.Parse((rect.bottom - rect.top).ToString());\r\n            }\r\n        }\r\n\r\n        if (method == \"normal\") {\r\n            ShowWindowAsync(hWnd, SW_SHOWNORMAL);\r\n        }\r\n        if (method == \"min\") {\r\n            ShowWindowAsync(hWnd, SW_SHOWMINIMIZED);\r\n        }\r\n        if (method == \"max\") {\r\n            ShowWindowAsync(hWnd, SW_MAXIMIZE);\r\n        }\r\n\r\n        if (method == \"activateTitle\") {\r\n            //string title = args[1];\r\n            //Console.WriteLine(\"title: {0}\", title);\r\n            //IntPtr hwnd = FindWindow(null, title);\r\n            IntPtr hwnd = FindWindow(null, args[1]);\r\n            if (hwnd != IntPtr.Zero) {\r\n                SetForegroundWindow(hwnd);\r\n                ShowWindowAsync(hwnd, SW_SHOWNORMAL);\r\n                SetActiveWindow(hwnd);\r\n            }\r\n        }\r\n\r\n        if (method == \"activateHandle\") {\r\n            IntPtr hwnd = new IntPtr(Int32.Parse(args[1]));\r\n            if (hwnd != IntPtr.Zero) {\r\n                SetForegroundWindow(hwnd);\r\n                ShowWindowAsync(hwnd, SW_SHOWNORMAL);\r\n                SetActiveWindow(hwnd);\r\n            }\r\n        }\r\n\r\n        if (method == \"title\") {\r\n            IntPtr hwnd = GetForegroundWindow();\r\n            const int nChars = 256;\r\n            System.Text.StringBuilder Buff = new System.Text.StringBuilder(nChars);\r\n            if (GetWindowText(hWnd, Buff, nChars) > 0) {\r\n                Console.WriteLine(Buff.ToString());\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    [DllImport(\"user32.dll\")]\r\n    public static extern IntPtr GetForegroundWindow();\r\n\r\n    [DllImport(\"user32.dll\")]\r\n    private static extern int MoveWindow(IntPtr hwnd, int x, int y, int nWidth,int nHeight, bool bRepaint);\r\n\r\n    [DllImport(\"user32.dll\")]\r\n    private static extern bool GetWindowRect(IntPtr hwnd, out RECT lpRect);\r\n\r\n    [DllImport(\"user32.dll\")]\r\n    private static extern bool ShowWindowAsync(IntPtr hwnd, int nCmdShow);\r\n\r\n    [DllImport(\"user32.dll\")]\r\n    private static extern IntPtr SetActiveWindow(IntPtr hwnd);\r\n\r\n    [DllImport(\"user32.dll\")]\r\n    static extern bool SetForegroundWindow(IntPtr hWnd);\r\n\r\n    [DllImport(\"user32.dll\")]\r\n    static extern IntPtr FindWindow(string lpClassName, string lpWindowName);\r\n\r\n    [DllImport(\"user32.dll\")]\r\n    static extern int GetWindowText(IntPtr hWnd, System.Text.StringBuilder lpWindowText, int nMaxCount);\r\n\r\n    [StructLayout(LayoutKind.Sequential)]\r\n    private struct RECT {\r\n        public int left;\r\n        public int top;\r\n        public int right;\r\n        public int bottom;\r\n    }\r\n}\r\n",
    "mapping": {},
    "path": "{window}/src/window.cs"
  },
  "{93767C71-6D5E-424B-87A3-75CE91D388F6}": {
    "source": "const WShell = require('WScript.Shell')\r\n\r\nconst {\r\n    move,\r\n    activateTitle,\r\n    min,\r\n    title\r\n} = require('./index')\r\n\r\nWShell.Run('notepad', 1, false)\r\nmove(100, 200, 900, 500)\r\nWScript.Sleep(500)\r\nmin()\r\nconst name = '無題 - メモ帳'\r\nactivateTitle(name)\r\nmove(200, 200, 700, 400)\r\n\r\nconsole.log(() => title())",
    "mapping": {},
    "path": "{window}/usage.js"
  },
  "{E373000E-2CA1-4068-A82A-A2C9DBBE1ADC}": {
    "source": "MIT License\n\nCopyright (c) 2023 wachaon\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
    "mapping": {},
    "path": "{window}/LICENSE"
  },
  "{15AA0190-3A44-42A6-B2D3-241FE31E7F65}": {
    "source": "# windwo\n*window* は [*wes*](https://github.com/wachaon/wes) でウインドウを操作するモジュールです。\n\n## インストール\n\n```bash\nwes install @wachaon/window --bare\n```\n\n## コンパイル\n*window* は付属のC#のソースコードをコンパイルせずに実行できますが、コンパイルすることで\nより高速に動作可能になります。\n\n```bash\nwes window --compile\n```\n\n既定値ではコンパイルされた実行ファイルは *window.exe* としてカレントディレクトリに配置されます。\nより高度なコンパイルが必要な場合は `csharpscript/compile(input, options)` を使用してください。\n\n## `move(left, top, width, height)`\n\nアクティブなウインドウの位置とサイズを変更します。\n\n## `get()`\n\nアクティブなウインドの位置とサイズをコンソールに表示します。\n*window.exe* をコンパイルしないと使用できません。\n\n```javascript\nconst { ger } = require('window')\nget()\n```\n\n## `hwnd()`\n\nアクティブなウインドのウインドウハンドルを取得します。\n\n```javascript\nconst { hwnd } = require('window')\nhwnd()\n```\n\n## `windowLeft()` `windowTop()` `windowWidth()` `windowHeight()`\n\nアクティブなウインドの位置やサイズを個別に取得します。\n\n```javascript\nconst { windowLeft, windowTop, windowWidth, windowHeight } = require('window')\nconsole.log('left: %O top: %O width: %O height: %O', windowLeft, windowTop, windowWidth, windowHeight)\n```\n## `max` `min` `normal`\n\nアクティブなウインドをそれぞれ「最大化」、「最小化」、「ノーマル」状態に移行します。\n\n```javascript\nconst { max, min, normal } = require('window')\nmax()\nnormal()\nmin()\n```\n\n## `activateHandle(hWnd)`\n\nウインドウハンドル(`hWnd`) のウインドウをアクティブにします。\nアクティブにしたウインドウが最小化されていたら、それは解除されます。\n\n```javascript\nconst { activateHandle, hwnd } = require('window')\n\nWShell.Run('notepad', 1, false)\nWScript.Sleep(500)\nconst notepad = hwnd()\nmin()\nactivateHandle(notepad)\n```\n\n## `activateTitle`\n\nウインドウタイトルからウインドウをアクティブにします。\nより確実にウインドウをアクティブにする為に実行ファイルがコンパイルされて居なくてもコンパイルしてから実行します。\n\n```javascript\nconst { activateTitle } = require('window')\n\nWShell.Run('notepad', 1, false)\nWScript.Sleep(500)\nmin()\nconst title = '無題 - メモ帳'\nactivateTitle(title)\n```\n",
    "mapping": {},
    "path": "{window}/README.md"
  }
}