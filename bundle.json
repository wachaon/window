{
  "{D66A9E5F-2F5C-4E4C-896D-18482FFF4AE3}": {
    "source": "{\n  \"name\": \"window\",\n  \"version\": \"0.0.2\",\n  \"description\": \"control window with wsh\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"bundle\": \"wes bundle ./src/compile.js ./src/window.cs ./usage.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/wachaon/window.git\"\n  },\n  \"keywords\": [\n    \"wsh\",\n    \"window\"\n  ],\n  \"author\": \"wachaon\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/wachaon/window/issues\"\n  },\n  \"homepage\": \"https://github.com/wachaon/window#readme\"\n}",
    "mapping": {},
    "path": "{window}/package.json"
  },
  "{EACD0A1D-4E88-4522-86BB-DA515B5FB1FC}": {
    "source": "const { readFileSync, existsFileSync, deleteFileSync } = require('filesystem')\r\nconst { resolve, basename, extname } = require('pathname')\r\nconst { execCommand } = require('utility')\r\nconst ps = require('ps')\r\n\r\n// window\r\nconst window_cs = generate('src/window.cs', 5)\r\nconst window_exe = resolve(__dirname, 'window.exe')\r\nconst exists_window_exe = existsFileSync(window_exe)\r\n\r\n// window method\r\nfunction move(left = 0, top = 0, width = 100, height = 100) {\r\n    if (exists_window_exe) execCommand(`${window_exe} move ${left} ${top} ${width} ${height}`)\r\n    else ps(window_cs, ['move', left, top, width, height])\r\n}\r\n\r\nfunction get() {\r\n    if (exists_window_exe) return execCommand(`${window_exe} get`)\r\n    else return ps(window_cs, ['get', 0, 0, 0, 0])\r\n}\r\n\r\nfunction hwnd() {\r\n    if (exists_window_exe) return execCommand(`${window_exe} hwnd`)\r\n    else return ps(window_cs, ['hwnd', 0, 0, 0, 0])\r\n}\r\n\r\nfunction windowLeft() {\r\n    if (exists_window_exe) return execCommand(`${window_exe} windowLeft`)\r\n    else return ps(window_cs, ['windowLeft', 0, 0, 0, 0])\r\n}\r\n\r\nfunction windowTop() {\r\n    if (exists_window_exe) return execCommand(`${window_exe} windowTop`)\r\n    else return ps(window_cs, ['windowTop', 0, 0, 0, 0])\r\n}\r\n\r\nfunction windowWidth() {\r\n    if (exists_window_exe) return execCommand(`${window_exe} windowWidth`)\r\n    else return ps(window_cs, ['windowWidth', 0, 0, 0, 0])\r\n}\r\n\r\nfunction windowHeight() {\r\n    if (exists_window_exe) return execCommand(`${window_exe} windowHeight`)\r\n    else return ps(window_cs, ['windowHeight', 0, 0, 0, 0])\r\n}\r\n\r\nfunction max() {\r\n    if (exists_window_exe) execCommand(`${window_exe} max`)\r\n    else ps(window_cs, ['max', 0, 0, 0, 0])\r\n}\r\n\r\nfunction min() {\r\n    if (exists_window_exe) execCommand(`${window_exe} min`)\r\n    else ps(window_cs, ['min', 0, 0, 0, 0])\r\n}\r\n\r\nfunction normal() {\r\n    if (exists_window_exe) execCommand(`${window_exe} normal`)\r\n    else ps(window_cs, ['normal', 0, 0, 0, 0])\r\n}\r\n\r\nfunction activateTitle(title) {\r\n    if (exists_window_exe) execCommand(`${window_exe} activateTitle \"${title}\"`)\r\n    // else ps(window_cs, ['activateTitle', title, 0, 0, 0])\r\n    else {\r\n        require('./src/compile')('src/window.cs')\r\n        execCommand(`${window_exe} activateTitle \"${title}\"`)\r\n        WScript.Sleep(1)\r\n        deleteFileSync(window_exe)\r\n    }\r\n}\r\n\r\nfunction activateHandle(hWnd) {\r\n    if (exists_window_exe) execCommand(`${window_exe} activateHandle ${hWnd}`)\r\n    else ps(window_cs, ['activateHandle', hWnd, 0, 0, 0])\r\n}\r\n\r\nfunction generate(spec, len = 0) {\r\n    const file = resolve(__dirname, spec)\r\n    const program = basename(file, extname(file))\r\n    const args = len ? (new Array(len)).fill(0).map((arg, i) => `$args[${i}]`).join(', ') : ''\r\n    const source = readFileSync(file, 'auto')\r\n    const code = `$Source = @\"\r\n${source}\"@\r\n\r\nAdd-Type -Language CSharp -TypeDefinition $Source\r\n[${program}]::Main(${args})`\r\n    return code\r\n}\r\n\r\nmodule.exports = {\r\n    move,\r\n    get,\r\n    hwnd,\r\n    windowLeft,\r\n    windowTop,\r\n    windowWidth,\r\n    windowHeight,\r\n    max,\r\n    min,\r\n    normal,\r\n    activateTitle,\r\n    activateHandle\r\n}",
    "mapping": {},
    "path": "{window}/index.js"
  },
  "{0E258C41-14A3-4503-9D0A-E05851840A98}": {
    "source": "const WShell = require('WScript.Shell')\r\n\r\nconst { resolve, basename, extname, toWin32Sep, dirname } = require('pathname')\r\nconst { existsFileSync } = require('filesystem')\r\nconst { execCommand } = require('utility')\r\nconst isCLI = require('isCLI')\r\nconst { unnamed } = require('argv')\r\n\r\nlet pkg = __dirname\r\nwhile (true) {\r\n    if (existsFileSync(resolve(pkg, 'package.json'))) break\r\n    if (pkg === process.cwd()) break\r\n    pkg = resolve(pkg, '..')\r\n}\r\n\r\nif (isCLI(__filename)) {\r\n    const spec = unnamed.slice(1)\r\n    if (!spec.length) throw new Error('You must specify a file to compile')\r\n    compile(...spec)\r\n} else module.exports = compile\r\n\r\nfunction compile(...specs) {\r\n    const files = specs.map(spec => {\r\n        const _spec = resolve(pkg, spec)\r\n        const filename = basename(spec, extname(spec))\r\n        return {\r\n            output: resolve(pkg, filename + '.exe'),\r\n            input: toWin32Sep(_spec)\r\n        }\r\n    })\r\n\r\n    const versions = [\r\n        \"v4.0.30319\",\r\n        \"V3.5\",\r\n        \"V3.0\",\r\n        \"v2.0.50727\",\r\n        \"v1.1.4322\",\r\n        \"v1.0.3705\"\r\n    ]\r\n\r\n    const compiler = versions\r\n        .map(version => {\r\n            return toWin32Sep(\r\n                resolve(\r\n                    WShell.ExpandEnvironmentStrings(\"%SystemRoot%\"),\r\n                    \"Microsoft.NET/Framework\",\r\n                    version,\r\n                    \"csc.exe\"\r\n                )\r\n            )\r\n        })\r\n        .find(exe => existsFileSync(exe))\r\n\r\n    files.forEach(file => {\r\n        const command = `${compiler} /target:exe /out:${file.output} ${file.input}`\r\n        console.log(execCommand(command))\r\n    })\r\n}\r\n",
    "mapping": {},
    "path": "{window}/src/compile.js"
  },
  "{CDB96034-8E8C-4573-B12C-868ACBAA9089}": {
    "source": "\r\nusing System;\r\nusing System.Windows;\r\nusing System.Runtime.InteropServices;\r\n\r\npublic class window {\r\n    public static int Main (params string[] args) {\r\n        string method = args[0];\r\n        IntPtr hWnd = GetForegroundWindow();\r\n\r\n        int SW_SHOWNORMAL = 1;\r\n        int SW_SHOWMINIMIZED = 2;\r\n        int SW_MAXIMIZE = 3;\r\n\r\n        if (method == \"move\") {\r\n            int left = Int32.Parse(args[1]);\r\n            int top = Int32.Parse(args[2]);\r\n            int width = Int32.Parse(args[3]);\r\n            int height = Int32.Parse(args[4]);\r\n            int right = width - left;\r\n            int bottom = height - top;\r\n            bool repaint = true;\r\n            MoveWindow(hWnd, left, top, width, height, repaint);\r\n        }\r\n        if (method == \"get\") {\r\n            RECT rect;\r\n            bool flag = GetWindowRect(hWnd, out rect);\r\n\r\n            if (args.Length == 1) {\r\n                Console.WriteLine(\r\n                    \"hWnd: {0} left: {1} top: {2} width: {3} height: {4}\",\r\n                    hWnd,\r\n                    rect.left,\r\n                    rect.top,\r\n                    rect.right - rect.left,\r\n                    rect.bottom - rect.top\r\n                );\r\n            } else {\r\n                return 0;\r\n            }\r\n        }\r\n        if (method == \"hwnd\") {\r\n            if (args.Length == 1) {\r\n                Console.WriteLine(hWnd);\r\n            } else {\r\n                return Int32.Parse(hWnd.ToString());\r\n            }\r\n        }\r\n        if (method == \"windowLeft\") {\r\n            RECT rect;\r\n            bool flag = GetWindowRect(hWnd, out rect);\r\n\r\n            if (args.Length == 1) {\r\n                Console.WriteLine(\"left {0}\", rect.left);\r\n            } else {\r\n                return Int32.Parse(rect.left.ToString());\r\n            }\r\n        }\r\n        if (method == \"windowTop\") {\r\n            RECT rect;\r\n            bool flag = GetWindowRect(hWnd, out rect);\r\n\r\n            if (args.Length == 1) {\r\n                Console.WriteLine(\"top: {0}\", rect.top);\r\n            } else {\r\n                return Int32.Parse(rect.top.ToString());\r\n            }\r\n        }\r\n        if (method == \"windowWidth\") {\r\n            RECT rect;\r\n            bool flag = GetWindowRect(hWnd, out rect);\r\n\r\n            if (args.Length == 1) {\r\n                Console.WriteLine(\"whidth: {0}\", rect.right - rect.left);\r\n            } else {\r\n                return Int32.Parse((rect.right - rect.left).ToString());\r\n            }\r\n        }\r\n        if (method == \"windowHeight\") {\r\n            RECT rect;\r\n            bool flag = GetWindowRect(hWnd, out rect);\r\n\r\n            if (args.Length == 1) {\r\n                Console.WriteLine(\"height: {0}\",rect.bottom - rect.top);\r\n            } else {\r\n                return Int32.Parse((rect.bottom - rect.top).ToString());\r\n            }\r\n        }\r\n\r\n        if (method == \"normal\") {\r\n            ShowWindowAsync(hWnd, SW_SHOWNORMAL);\r\n        }\r\n        if (method == \"min\") {\r\n            ShowWindowAsync(hWnd, SW_SHOWMINIMIZED);\r\n        }\r\n        if (method == \"max\") {\r\n            ShowWindowAsync(hWnd, SW_MAXIMIZE);\r\n        }\r\n\r\n        if (method == \"activateTitle\") {\r\n            //string title = args[1];\r\n            //Console.WriteLine(\"title: {0}\", title);\r\n            //IntPtr hwnd = FindWindow(null, title);\r\n            IntPtr hwnd = FindWindow(null, args[1]);\r\n            if (hwnd != IntPtr.Zero) {\r\n                SetForegroundWindow(hwnd);\r\n                ShowWindowAsync(hwnd, SW_SHOWNORMAL);\r\n                SetActiveWindow(hwnd);\r\n            }\r\n        }\r\n\r\n        if (method == \"activateHandle\") {\r\n            IntPtr hwnd = new IntPtr(Int32.Parse(args[1]));\r\n            if (hwnd != IntPtr.Zero) {\r\n                SetForegroundWindow(hwnd);\r\n                ShowWindowAsync(hwnd, SW_SHOWNORMAL);\r\n                SetActiveWindow(hwnd);\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    [DllImport(\"user32.dll\")]\r\n    public static extern IntPtr GetForegroundWindow();\r\n\r\n    [DllImport(\"user32.dll\")]\r\n    private static extern int MoveWindow(IntPtr hwnd, int x, int y, int nWidth,int nHeight, bool bRepaint);\r\n\r\n    [DllImport(\"user32.dll\")]\r\n    private static extern bool GetWindowRect(IntPtr hwnd, out RECT lpRect);\r\n\r\n    [DllImport(\"user32.dll\")]\r\n    private static extern bool ShowWindowAsync(IntPtr hwnd, int nCmdShow);\r\n\r\n    [DllImport(\"user32.dll\")]\r\n    private static extern IntPtr SetActiveWindow(IntPtr hwnd);\r\n\r\n    [DllImport(\"user32.dll\")]\r\n    static extern bool SetForegroundWindow(IntPtr hWnd);\r\n\r\n    [DllImport(\"user32.dll\")]\r\n    static extern IntPtr FindWindow(string lpClassName, string lpWindowName);\r\n\r\n\r\n    [StructLayout(LayoutKind.Sequential)]\r\n    private struct RECT {\r\n        public int left;\r\n        public int top;\r\n        public int right;\r\n        public int bottom;\r\n    }\r\n}\r\n",
    "mapping": {},
    "path": "{window}/src/window.cs"
  },
  "{BA792137-5BA3-4D3F-82A0-19FD74D2DE53}": {
    "source": "const WShell = require('WScript.Shell')\r\n\r\nconst {\r\n    move,\r\n    activateTitle,\r\n    min\r\n} = require('./index')\r\n\r\nWShell.Run('notepad', 1, false)\r\nmove(100, 200, 900, 500)\r\nWScript.Sleep(500)\r\nmin()\r\nconst title = '無題 - メモ帳'\r\nactivateTitle(title)\r\nmove(200, 200, 700, 400)",
    "mapping": {},
    "path": "{window}/usage.js"
  }
}